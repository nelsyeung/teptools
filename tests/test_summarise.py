"""Test summarise script.

All args arrays have extra default values in it to prevent custom user rc file
interfering with the tests."""
import os
import glob
import pytest
import summarise

fixtures_dir = os.path.join('tests', 'fixtures')


@pytest.fixture
def chdir_fixtures(request):
    """Change the directory to the fixtures dir and back to the root directory
    after finished."""
    cwd = os.getcwd()
    os.chdir(fixtures_dir)

    def fin():
        os.chdir(cwd)

    request.addfinalizer(fin)


@pytest.fixture
def remove_output(request):
    """Remove output summary files generated by --output option."""
    def fin():
        for output in glob.glob('*.summary'):
            os.remove(output)

    request.addfinalizer(fin)


def test_main_single(capsys):
    """Supplying a single outfile should print out the correct summary."""
    args = [os.path.join(fixtures_dir, 'one.out'),
            '--no-vimdiff', '--no-output']
    expected_file = os.path.join(fixtures_dir, 'one_expected.summary')
    summarise.main(args, 'emptyrc')
    out, err = capsys.readouterr()

    with open(expected_file, 'r') as f:
        expected = f.read()

    assert out == expected


@pytest.mark.parametrize('args', [
    [],
    ['*.out'],
    ['../fixtures']
])
def test_main_globbing(args, capsys, chdir_fixtures):
    """Supplying a glob pattern should also get the correct file and if a
    directory or directories is supplied then it should find all *.{ext} files
    within the directory."""
    args.extend(['--no-vimdiff', '--no-output'])
    summarise.main(args, 'emptyrc')
    out, err = capsys.readouterr()

    with open('one_expected.summary', 'r') as f:
        expected = f.read()

    assert out == expected


def test_main_write_output(capsys, remove_output):
    """--output option should write to {filename}.summary file."""
    args = [os.path.join(fixtures_dir, 'one.out'),
            '--output', '--no-vimdiff']
    expected_file = os.path.join(fixtures_dir, 'one_expected.summary')
    summarise.main(args, 'emptyrc')

    with open('one.summary', 'r') as f:
        out = f.read()

    with open(expected_file, 'r') as f:
        expected = f.read()

    stdout, err = capsys.readouterr()

    assert (out == expected and
            stdout == 'tests/fixtures/one.out summary > one.summary\n')


def test_side_view(capsys):
    """Supplying two outfile should print out the two outputs side-by-side."""
    args = [os.path.join(fixtures_dir, 'one.out'),
            os.path.join(fixtures_dir, 'two.in'),
            '--no-output', '--no-vimdiff']
    expected_file = os.path.join(fixtures_dir, 'side_view_expected.summary')
    summarise.main(args, 'emptyrc')
    out, err = capsys.readouterr()

    with open(expected_file, 'r') as f:
        expected = f.read()

    assert out == expected


def test_vimdiff():
    """vimdiff mode should remove the temporary output."""
    args = [os.path.join(fixtures_dir, 'one.out'),
            os.path.join(fixtures_dir, 'two.in'),
            '--vimdiff', '--no-output']
    summarise.main(args, 'emptyrc')

    assert (not os.path.exists('one.summary') and
            not os.path.exists('two.summary'))
